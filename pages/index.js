import Head from 'next/head'
import { useEffect, useRef, useState } from "react"
import glReset from "gl-reset";

import { Initialise } from "../webgl/procedural-terrain"
import styles from '../styles/Home.module.css'

export default function Home() {
  const canvasRef = useRef();
  const scene = useRef({
    running: false,
    controls: {
      startLoop: () => { },
      stopLoop: () => { }
    }
  });

  const [sceneParams, setSceneParams] = useState({
    perlinParams: {
      octaves: 2,
      lacunarity: 2,
      persistence: 0.1,
      n: 3,
      seed: '',
      normalizeGrad: true,
    }
  });

  // on component mount
  useEffect(() => {
    document.addEventListener("keydown", (e) => {
      if (e.code == "Tab") {
        e.preventDefault();
        if (scene.current.running) {
          scene.current.controls.stopLoop();
          scene.current.running = false;
        }
        else {
          scene.current.controls.startLoop();
          scene.current.running = true;
        }
      }
    });
  }, [])

  // on sceneParams change (will be called once on mount)
  useEffect(() => {
    // reset gl context
    const gl = canvasRef.current.getContext('webgl2');
    glReset(gl);

    // re-initialize, set new scene controls and start scene
    scene.current.controls = Initialise(gl, canvasRef.current, sceneParams.perlinParams);

    scene.current.controls.startLoop();
    scene.current.running = true;
  }, [sceneParams]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Procedural Terrain Generation</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <canvas width="720" height="480" ref={canvasRef}></canvas>
      </main>

    </div>
  )
}
