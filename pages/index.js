import Head from 'next/head'
import { useEffect, useRef, useState } from "react"
import _ from "lodash"

import glReset from "gl-reset";
import Drawer from '@material-ui/core/Drawer';

import StatsOverlayCanvasWrapper from "../src/components/stats-overlay"
import { Initialise } from "../webgl/procedural-terrain"
import styles from '../styles/Home.module.css'

export default function Home() {
  // scene-related hooks
  const canvasRef = useRef();
  const scene = useRef({
    running: false,
    controls: {
      startLoop: () => { },
      stopLoop: () => { }
    }
  });

  const [sceneParams, setSceneParams] = useState({
    perlinParams: {
      octaves: 2,
      lacunarity: 2,
      persistence: 0.1,
      n: 3,
      seed: '',
      normalizeGrad: true,
    }
  });

  const [metrics, setSceneMetrics] = useState({
    fps: 0,
  });

  // report fps based on average of the last 10 frames
  let prevTime = performance.now();
  let frameCounter = 0;
  // callback passed to loop, call on each loop to get the frame rate
  const reportTimeCallback = (currentFrameTime) => {
    if (frameCounter < 5) {
      frameCounter++;
      return;
    }

    const deltaFrameTime = currentFrameTime - prevTime;
    const fps = Math.round(5 * (1000 / deltaFrameTime));

    setSceneMetrics({
      ...metrics,
      fps,
    });

    prevTime = currentFrameTime;
    frameCounter = 0;
  }

  // on component mount
  useEffect(() => {

  }, [])

  // on sceneParams change (will be called once on mount)
  useEffect(() => {
    // reset gl context
    const gl = canvasRef.current.getContext('webgl2');
    glReset(gl);

    // re-initialize, set new scene controls and start scene
    scene.current.controls = Initialise(gl, canvasRef.current, sceneParams.perlinParams, reportTimeCallback);

    scene.current.controls.startLoop();
    scene.current.running = true;
  }, [sceneParams]);


  return (
    <div className={styles.container}>
      <Head>
        <title>Procedural Terrain Generation</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <StatsOverlayCanvasWrapper fps={metrics.fps}>
          <canvas width="720" height="480" ref={canvasRef}></canvas>
        </StatsOverlayCanvasWrapper>
      </main>
    </div>
  )
}
